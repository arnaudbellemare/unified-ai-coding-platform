/**
 * Generated TypeScript types for smart contract interactions
 * This file would normally be generated by TypeChain from the Solidity contracts
 */

import { ethers } from 'ethers'

// AgentWallet Contract ABI and Types
export interface AgentWallet {
  agentId(): Promise<string>
  spendingRule(): Promise<{
    isActive: boolean
    maxDailySpend: bigint
    maxSingleTransaction: bigint
    dailySpent: bigint
    lastResetDate: bigint
  }>

  executeTransaction(to: string, value: bigint, data: string, gasLimit: bigint): Promise<any>

  executeBatchTransactions(tos: string[], values: bigint[], datas: string[], gasLimits: bigint[]): Promise<any>

  updateSpendingRule(maxDailySpend: bigint, maxSingleTransaction: bigint, allowedServices: string[]): Promise<any>

  toggleSpendingRule(): Promise<any>

  emergencyPause(): Promise<any>
  emergencyUnpause(): Promise<any>

  getSpendingInfo(): Promise<{
    isActive: boolean
    maxDailySpend: bigint
    maxSingleTransaction: bigint
    dailySpent: bigint
    lastResetDate: bigint
  }>

  getAllowedServices(): Promise<string[]>
  getBackupWallets(): Promise<string[]>
  getRecoveryContacts(): Promise<string[]>
}

// AgentWalletFactory Contract ABI and Types
export interface AgentWalletFactory {
  createAgentWallet(
    agentId: string,
    maxDailySpend: bigint,
    maxSingleTransaction: bigint,
    allowedServices: string[],
    backupWallets: string[],
    requiredApprovals: bigint,
    recoveryContacts: string[],
    recoveryDelay: bigint,
  ): Promise<any>

  createAgentWalletWithDefaults(agentId: string, backupWallets: string[], recoveryContacts: string[]): Promise<any>

  getAgentWallet(agentId: string): Promise<string>
  getAgentId(wallet: string): Promise<string>
  getAllWallets(): Promise<string[]>
  getWalletCount(): Promise<bigint>
  isAgentWallet(wallet: string): Promise<boolean>

  getWalletInfo(agentId: string): Promise<{
    wallet: string
    exists: boolean
    balance: bigint
  }>
}

// Factory classes for contract instantiation
export class AgentWallet__factory {
  static connect(address: string, signerOrProvider: ethers.Signer | ethers.Provider): AgentWallet {
    // This would normally be generated by TypeChain
    const abi = [
      'function agentId() view returns (string)',
      'function spendingRule() view returns (tuple(bool isActive, uint256 maxDailySpend, uint256 maxSingleTransaction, uint256 dailySpent, uint256 lastResetDate))',
      'function executeTransaction(address to, uint256 value, bytes data, uint256 gasLimit) returns (bool)',
      'function executeBatchTransactions(address[] tos, uint256[] values, bytes[] datas, uint256[] gasLimits)',
      'function updateSpendingRule(uint256 maxDailySpend, uint256 maxSingleTransaction, address[] allowedServices)',
      'function toggleSpendingRule()',
      'function emergencyPause()',
      'function emergencyUnpause()',
      'function getSpendingInfo() view returns (tuple(bool isActive, uint256 maxDailySpend, uint256 maxSingleTransaction, uint256 dailySpent, uint256 lastResetDate))',
      'function getAllowedServices() view returns (address[])',
      'function getBackupWallets() view returns (address[])',
      'function getRecoveryContacts() view returns (address[])',
      'event TransactionExecuted(string indexed agentId, address indexed to, uint256 value, uint256 nonce)',
      'event SpendingRuleUpdated(string indexed agentId, uint256 maxDailySpend, uint256 maxSingleTransaction)',
      'event EmergencyPause(string indexed agentId, address indexed pauser)',
    ]

    return new ethers.Contract(address, abi, signerOrProvider) as unknown as AgentWallet
  }
}

export class AgentWalletFactory__factory {
  static connect(address: string, signerOrProvider: ethers.Signer | ethers.Provider): AgentWalletFactory {
    // This would normally be generated by TypeChain
    const abi = [
      'function createAgentWallet(string agentId, uint256 maxDailySpend, uint256 maxSingleTransaction, address[] allowedServices, address[] backupWallets, uint256 requiredApprovals, address[] recoveryContacts, uint256 recoveryDelay) returns (address)',
      'function createAgentWalletWithDefaults(string agentId, address[] backupWallets, address[] recoveryContacts) returns (address)',
      'function getAgentWallet(string agentId) view returns (address)',
      'function getAgentId(address wallet) view returns (string)',
      'function getAllWallets() view returns (address[])',
      'function getWalletCount() view returns (uint256)',
      'function isAgentWallet(address wallet) view returns (bool)',
      'function getWalletInfo(string agentId) view returns (tuple(address wallet, bool exists, uint256 balance))',
      'event AgentWalletCreated(string indexed agentId, address indexed wallet, address indexed creator, uint256 timestamp)',
      'event AgentWalletDestroyed(string indexed agentId, address indexed wallet, address indexed destroyer, uint256 timestamp)',
    ]

    return new ethers.Contract(address, abi, signerOrProvider) as unknown as AgentWalletFactory
  }
}

// Event types
export interface AgentWalletCreatedEvent {
  agentId: string
  wallet: string
  creator: string
  timestamp: bigint
}

export interface TransactionExecutedEvent {
  agentId: string
  to: string
  value: bigint
  nonce: bigint
}

export interface SpendingRuleUpdatedEvent {
  agentId: string
  maxDailySpend: bigint
  maxSingleTransaction: bigint
}

export interface EmergencyPauseEvent {
  agentId: string
  pauser: string
}
